name: Check for New Release

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight (UTC)
  workflow_dispatch: # Allows manual triggering if needed

jobs:
  check-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Get the latest release from jesec/flood
      - name: Fetch latest release
        id: get_release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/jesec/flood/releases/latest | jq -r '.tag_name')
          echo "Latest release: $LATEST_RELEASE"
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV

      - name: Debug - Check contents of .last_release
        run: cat .last_release

      # Step 2: Compare with the last known release
      - name: Check if release is new
        id: compare_release
        run: |
          if [ -f ".last_release" ]; then
            LAST_RELEASE=$(cat .last_release)
          else
            LAST_RELEASE="None"
          fi
          echo "Last release: $LAST_RELEASE"

          if [ "$LATEST_RELEASE" != "$LAST_RELEASE" ]; then
            echo "New release detected: $LATEST_RELEASE"
            echo "::set-output name=new_release::true"
          else
            echo "No new release"
            echo "::set-output name=new_release::false"
          fi

      # Step 3: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 4: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch full history to ensure the commit works

      # Step 5: Update the last known release (Only if a new release is detected)
      - name: Update last known release
        if: steps.compare_release.outputs.new_release == 'true'
        run: |
          echo "$LATEST_RELEASE" > .last_release

      # Step 6: Commit and Push .last_release (Only if a new release is detected)
      - name: Commit and Push .last_release
        if: steps.compare_release.outputs.new_release == 'true'
        run: |
          git add .last_release
          git commit -m "Update .last_release to $LATEST_RELEASE"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 7: Trigger the build workflow (Only if a new release is detected)
      - name: Trigger Docker Build Workflow
        if: steps.compare_release.outputs.new_release == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-and-push.yml',
              ref: 'main'
            })
